[
    {
        "id": "ea50618c3962c47b",
        "type": "group",
        "z": "9c917bed058521b9",
        "name": "Dynamic ESS",
        "style": {
            "label": true
        },
        "nodes": [
            "21816b83878d95e5",
            "24ad2be5725d73d2",
            "e2151fa44797a843"
        ],
        "x": 34,
        "y": 19,
        "w": 1092,
        "h": 117
    },
    {
        "id": "21816b83878d95e5",
        "type": "victron-dynamic-ess",
        "z": "9c917bed058521b9",
        "g": "ea50618c3962c47b",
        "name": "",
        "vrm_id": "",
        "vrmtoken": "",
        "country": "nl",
        "b_max": "14",
        "fb_max": "4.5",
        "tb_max": "6.5",
        "fg_max": "2.5",
        "tg_max": "2.5",
        "buy_price_formula": "(p+0.03+0.13)*1.21",
        "sell_price_formula": "(p-0.03+0.13)*1.21",
        "b_goal_SOC": "0",
        "b_goal_hour": "0",
        "feed_in_possible": true,
        "feed_in_control_on": true,
        "verbose": true,
        "x": 940,
        "y": 80,
        "wires": [
            [
                "e2151fa44797a843"
            ],
            [],
            [],
            []
        ]
    },
    {
        "id": "24ad2be5725d73d2",
        "type": "inject",
        "z": "9c917bed058521b9",
        "g": "ea50618c3962c47b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "21816b83878d95e5"
            ]
        ]
    },
    {
        "id": "e2151fa44797a843",
        "type": "link out",
        "z": "9c917bed058521b9",
        "g": "ea50618c3962c47b",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "a94414e8deed9244",
            "ddecc0160d30fdf9"
        ],
        "x": 1085,
        "y": 60,
        "wires": []
    },
    {
        "id": "286fe630a9692464",
        "type": "group",
        "z": "9c917bed058521b9",
        "name": "/dess page",
        "style": {
            "label": true
        },
        "nodes": [
            "2de71da69308a569",
            "104a53582270099f",
            "83e8f596cd5edc47",
            "5e71c1dbc9e623bf",
            "212edcf112683d6e",
            "4fbe41603d39d06d",
            "6527e095b32452ed",
            "251d7287a678fea1",
            "c31378abe1b10471",
            "4997b8586e17cf47",
            "b70731968b362776"
        ],
        "x": 34,
        "y": 259,
        "w": 1092,
        "h": 162
    },
    {
        "id": "2de71da69308a569",
        "type": "http in",
        "z": "9c917bed058521b9",
        "g": "286fe630a9692464",
        "name": "Dynamic ESS (/dess)",
        "url": "/dess",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 300,
        "wires": [
            [
                "251d7287a678fea1"
            ]
        ]
    },
    {
        "id": "104a53582270099f",
        "type": "http in",
        "z": "9c917bed058521b9",
        "g": "286fe630a9692464",
        "name": "Stylesheet DESS",
        "url": "/dess/style.css",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 380,
        "wires": [
            [
                "83e8f596cd5edc47"
            ]
        ]
    },
    {
        "id": "83e8f596cd5edc47",
        "type": "template",
        "z": "9c917bed058521b9",
        "g": "286fe630a9692464",
        "name": "stylesheet",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "body {\n  background-color: #fff;\n  padding-left: 5%;\n  padding-right: 5%;\n}\nh1 {\n  color: white;\n}\np {\n  color: black;\n}\n\n.dess-table {\n    border-collapse: collapse;\n    margin: 25px 0;\n    font-size: 0.9em;\n    font-family: sans-serif;\n    min-width: 400px;\n    box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);\n}\n\n.dess-table thead tr {\n    background-color: #009879;\n    color: #ffffff;\n    text-align: left;\n}\n\n.dess-table th,\n.dess-table td {\n    padding: 12px 15px;\n}",
        "output": "str",
        "x": 540,
        "y": 380,
        "wires": [
            [
                "5e71c1dbc9e623bf"
            ]
        ]
    },
    {
        "id": "5e71c1dbc9e623bf",
        "type": "change",
        "z": "9c917bed058521b9",
        "g": "286fe630a9692464",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "text/css",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 380,
        "wires": [
            [
                "6527e095b32452ed"
            ]
        ]
    },
    {
        "id": "212edcf112683d6e",
        "type": "http in",
        "z": "9c917bed058521b9",
        "g": "286fe630a9692464",
        "name": "Javascript DESS",
        "url": "/dess/index.js",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 340,
        "wires": [
            [
                "b70731968b362776"
            ]
        ]
    },
    {
        "id": "4fbe41603d39d06d",
        "type": "change",
        "z": "9c917bed058521b9",
        "g": "286fe630a9692464",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "text/javascript",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 340,
        "wires": [
            [
                "6527e095b32452ed"
            ]
        ]
    },
    {
        "id": "6527e095b32452ed",
        "type": "http response",
        "z": "9c917bed058521b9",
        "g": "286fe630a9692464",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1050,
        "y": 340,
        "wires": []
    },
    {
        "id": "251d7287a678fea1",
        "type": "function",
        "z": "9c917bed058521b9",
        "g": "286fe630a9692464",
        "name": "prepare dess variables",
        "func": "let dess = flow.get('dess')     \n\nmsg.lastValidUpdate = new Date(flow.get('lastValidUpdate')).toLocaleString()\nlet date = new Date()\nmsg.hour = date.getHours()\n\nmsg.dess_mode = flow.get('dess_mode')\nmsg.dess_mode_text = ['Off', 'Auto', 'Buy', 'Sell', 'Node-RED'][msg.dess_mode]\nif (Object.keys(dess.schedule).length == 24) {\n    msg.dess_hours = 24\n} else {\n    msg.dess_hours = 48\n}\n\nmsg.estimations = {\n    payload: {\n        \"datasets\": [\n            {\n                label: 'Consumption',\n                type: 'line',\n                data: Object.values(dess.output.C).slice(0, msg.dess_hours).map(x => x.toFixed(3)),\n                borderColor: \"#FA716F\",\n                fill: false,\n                stepped: 'left',\n                pointRadius: 1,\n                borderWidth: 1\n            },\n            {\n                label: 'Battery',\n                type: 'line',\n                data: Object.values(dess.output.B).slice(0, msg.dess_hours).map(x => x.toFixed(3)),\n                borderColor: \"#4790D0\",\n                fill: false,\n                stepped: 'left',\n                pointRadius: 1,\n                borderWidth: 1\n            },\n            {\n                label: 'PV yield',\n                type: 'line',\n                data: Object.values(dess.output.PV).slice(0, msg.dess_hours).map(x => x.toFixed(3)),\n                borderColor: \"#F7AB3E\",\n                backgroundColor: \"#f8aa3dAA\",\n                fill: true,\n                stepped: 'left',\n                pointRadius: 1,\n                borderWidth: 1\n            }\n        ],\n        \"labels\": Object.keys(dess.schedule).slice(0, msg.dess_hours),\n        \"B_max\": dess.options.b_max\n    }\n}\n\nmsg.schedule = {\n    payload: {\n        \"datasets\": [\n            {\n                label: \"Grid Usage\",\n                data: Object.values(dess.output.g).slice(0, msg.dess_hours).map(x => x.toFixed(3)),\n                borderColor: \"#FA716F\",\n                backgroundColor: \"#FA716F\",\n                fill: true\n            },\n            {\n                label: \"Battery usage\",\n                data: Object.values(dess.output.b).slice(0, msg.dess_hours).map(x => x.toFixed(3)),\n                borderColor: \"#4790D0\",\n                backgroundColor: \"#4790D0\",\n                fill: true\n            }],\n        \"labels\": Object.keys(dess.schedule).slice(0, msg.dess_hours)\n    }\n}\n\nmsg.dayaheadprices = {\n    payload: {\n        \"datasets\": [\n            {\n                label: \"Buy Price\",\n                type: 'line',\n                data: Object.values(dess.output.p_b).slice(0, msg.dess_hours).map(x => x.toFixed(3)),\n                borderColor: \"#FA716F\",\n                backgroundColor: \"#FA716F\",\n                fill: false,\n                stepped: 'left',\n                pointRadius: 1,\n                borderWidth: 1\n            }, {\n                label: \"Sell Price\",\n                type: 'line',\n                data: Object.values(dess.output.p_s).slice(0, msg.dess_hours).map(x => x.toFixed(3)),\n                borderColor: \"#8BC964\",\n                backgroundColor: \"#8BC964\",\n                fill: false,\n                stepped: 'left',\n                pointRadius: 1,\n                borderWidth: 1\n            },],\n        \"labels\": Object.keys(dess.schedule).slice(0, msg.dess_hours)\n    }\n}\n\nmsg.costs = {\n    payload: {\n        \"datasets\": [\n            {\n                label: \"Grid costs\",\n                data: Object.values(dess.output.g_cost).slice(0, msg.dess_hours).map(x => x.toFixed(3)),\n                borderColor: \"#FA716F\",\n                backgroundColor: \"#FA716F\",\n                fill: true\n            },\n            {\n                label: \"Battery costs\",\n                data: Object.values(dess.output.b_cost).slice(0, msg.dess_hours).map(x => x.toFixed(3)),\n                borderColor: \"#4790D0\",\n                backgroundColor: \"#4790D0\",\n                fill: true\n            }],\n        \"labels\": Object.keys(dess.schedule).slice(0, msg.dess_hours)\n    }\n}\n\nlet b = Object.values(dess.output.b).slice(0, msg.dess_hours).map(x => x.toFixed(3));\nlet g = Object.values(dess.output.g).slice(0, msg.dess_hours).map(x => x.toFixed(3));\nlet C = Object.values(dess.output.C).slice(0, msg.dess_hours).map(x => x.toFixed(3));\nlet PV = Object.values(dess.output.PV).slice(0, msg.dess_hours).map(x => x.toFixed(3));\nlet n = C.map((c, i) => PV[i] - c);\n\nlet to_b = b.map(x => { if (x < 0) { return -x } else { return 0 } });\nlet from_b = b.map(x => { if (x > 0) { return x } else { return 0 } });\nlet to_g = g.map(x => { if (x < 0) { return -x } else { return 0 } });\nlet from_g = g.map(x => { if (x > 0) { return x } else { return 0 } });\n\nlet met_need = C.map((c, i) => Math.min(c, PV[i]));\n\nlet from_g_to_b = []\nlet from_b_to_g = []\n\nfor (let i = 0; i <= (msg.dess_hours - 1); i++) {\n    if (Math.sign(b[i]) * Math.sign(g[i]) >= 0) {\n        from_b_to_g.push(0)\n        from_g_to_b.push(0)\n    } else if (Math.sign(b[i]) == 1 && Math.sign(n[i]) >= 0) {\n        from_b_to_g.push(b[i])\n        from_g_to_b.push(0)\n    } else if (Math.sign(b[i]) == 1 && Math.sign(n[i]) == -1) {\n        from_b_to_g.push(-g[i])\n        from_g_to_b.push(0)\n    } else if (Math.sign(g[i]) == 1 && Math.sign(n[i]) >= 0) {\n        from_b_to_g.push(0)\n        from_g_to_b.push(g[i])\n    } else if (Math.sign(g[i]) == 1 && Math.sign(n[i]) == -1) {\n        from_b_to_g.push(0)\n        from_g_to_b.push(-b[i])\n    }\n}\n\nfrom_g = from_g.map((x, i) => (x - from_g_to_b[i]).toFixed(3))\nfrom_b = from_b.map((x, i) => (x - from_b_to_g[i]).toFixed(3))\nto_b = to_b.map((x, i) => (x - from_g_to_b[i]).toFixed(3))\nto_g = to_g.map((x, i) => (x - from_b_to_g[i]).toFixed(3))\n\nmsg.energy = {\n    payload: {\n        \"datasets\": [\n            {\n                label: \"Consumption\",\n                type: 'line',\n                data: C,\n                borderColor: \"#1066B1\",\n                backgroundColor: \"#1066B1\",\n                fill: false,\n                stepped: 'middle',\n                borderWidth: 1\n            },\n            {\n                label: \"PV Yield\",\n                type: 'line',\n                data: PV,\n                borderColor: \"#F7AB3E\",\n                backgroundColor: \"#F7AB3E\",\n                fill: false,\n                stepped: 'middle',\n                borderWidth: 1\n            },\n            {\n                label: \"\",\n                type: 'bar',\n                data: met_need,\n                legend: false,\n                borderColor: \"#FFFFFF00\",\n                backgroundColor: \"#FFFFFF00\",\n                fill: true,\n                stack: 1,\n            },\n            {\n                label: \"From Grid\",\n                type: 'bar',\n                data: from_g,\n                borderColor: \"#FA716F\",\n                backgroundColor: \"#FA716F\",\n                barPercentage: 0.95,\n                fill: true,\n                stack: 1,\n            },\n            {\n                label: \"To Grid\",\n                type: 'bar',\n                data: to_g,\n                borderColor: \"#8BC964\",\n                backgroundColor: \"#8BC964\",\n                barPercentage: 0.95,\n                fill: true,\n                stack: 1,\n            },\n            {\n                label: \"From Battery\",\n                type: 'bar',\n                data: from_b,\n                borderColor: \"#4790D0\",\n                backgroundColor: \"#4790D0\",\n                barPercentage: 0.95,\n                fill: true,\n                stack: 1,\n            },\n            {\n                label: \"To Battery\",\n                type: 'bar',\n                data: to_b,\n                borderColor: \"#9683EC\",\n                backgroundColor: \"#9683EC\",\n                barPercentage: 0.95,\n                fill: true,\n                stack: 1,\n            },\n            {\n                label: \"From Battery to Grid\",\n                type: 'bar',\n                data: from_b_to_g,\n                borderColor: \"#4790D0\",\n                backgroundColor: \"#8BC964\",\n                borderWidth: 4,\n                barPercentage: 0.95,\n                fill: true,\n                stack: 1,\n            },\n            {\n                label: \"From Grid to Battery\",\n                type: 'bar',\n                data: from_g_to_b,\n                borderColor: \"#FA716F\",\n                borderWidth: 4,\n                backgroundColor: \"#9683EC\",\n                barPercentage: 0.95,\n                fill: true,\n                stack: 1,\n            },],\n        \"labels\": Object.keys(dess.schedule).slice(0, msg.dess_hours)\n    }\n}\n\nmsg.table = []\nfor (let schedule = 0; schedule <= 3; schedule++) {\n    const currentDateTime = new Date()\n    const currentDay = currentDateTime.getDay()\n    currentDateTime.setMinutes(schedule*60, 0, 0)\n    const scheduleDay = currentDateTime.getDay()\n    let currentHour = currentDateTime.getHours()\n    if ( currentDay != scheduleDay ) {\n        currentHour += 24\n    }    \n    msg.table.push({\n        soc: Number((dess.output.SOC[currentHour]).toFixed(1)),\n        duration: 3600,\n        start: currentDateTime.toLocaleString()\n    })\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 300,
        "wires": [
            [
                "4997b8586e17cf47"
            ]
        ]
    },
    {
        "id": "c31378abe1b10471",
        "type": "ui_template",
        "z": "9c917bed058521b9",
        "g": "286fe630a9692464",
        "group": "24f9d377dd61c123",
        "name": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<a href=\"../dess\">Dynamic ESS</a>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1040,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "4997b8586e17cf47",
        "type": "template",
        "z": "9c917bed058521b9",
        "g": "286fe630a9692464",
        "name": "html page",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"refresh\" content=\"60\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Dynamic ESS</title>\n        <link rel=\"stylesheet\" href=\"/dess/style.css\">\n  </head>\n  <body>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <script src=\"/dess/index.js\"></script>\n  \n  <h2>Dynamic ESS - {{ flow.dess.options.vrm_id }} ({{ flow.dess.options.country }}) - {{ dess_mode_text }}</h2>\n\n<div class=\"canvas-container\">\n  <div class=\"canvas-pair\">\n    <div id=\"ca\" style=\"height: 30vh; width: 45%;display:inline-block;\">\n      <canvas id=\"estimations\"></canvas>\n    </div>\n\n    <div id=\"cb\" style=\"height: 30vh; width: 45%;margin-left:5%;display:inline-block;\">\n      <canvas id=\"schedule\"></canvas>\n    </div>\n  </div>\n  <div class=\"canvas-pair\">\n    <div id=\"cc\" style=\"height: 30vh; width: 45%;display:inline-block;\">\n      <canvas id=\"dayaheadprices\"></canvas>\n    </div>\n\n    <div id=\"cd\" style=\"height: 30vh; width: 45%;margin-left:5%;display:inline-block;\">\n      <canvas id=\"costs\"></canvas>\n    </div>\n  </div>\n</div>\n\n<div id=\"ce\" style=\"height: 30vh;\">\n  <canvas id=\"energy\"></canvas>\n</div>\n\n<script>\n    const estimationschart = new Chart(\n    document.getElementById('estimations'),\n      {\n        type: 'bar',\n      data: {\n        labels: [{{estimations.payload.labels}}],\n        datasets: [\n            {{#estimations.payload.datasets}}\n            {\n                label: '{{label}}',\n                type: '{{type}}',\n                data: [{{data}}],\n                borderColor: '{{borderColor}}',\n                {{#backgroundColor}}\n                backgroundColor: '{{backgroundColor}}',\n                {{/backgroundColor}}\n                fill: {{fill}},\n                stepped: '{{stepped}}',\n                pointRadius: {{pointRadius}},\n                borderWidth: {{borderWidth}}\n            },\n            {{/estimations.payload.datasets}}\n        ]\n      },\n        options: {\n          maintainAspectRatio: false,\n          title: {\n            display: true,\n            text: ''\n          },\n          legend: {\n            position: 'top',\n            display: true\n          },\n          interaction: {\n            intersect: false,\n            mode: 'index',\n          },      \n          scales: {\n              y: {\n                  beginAtZero: true,\n                  title: {\n                      display: true,\n                      text: \"Energy in kWh\"\n                  }\n              }\n          },\n          plugins: {\n              arbitraryLine: {\n                  pastBackgroundColor: '#eee',\n                  nowBackgroundColor: '#ddd',\n                  offset: 1,\n                  hours: {{ dess_hours }}\n              },\n              title: {\n                  display: true,\n                  text: \"Overview graph\"\n              },\n              subtitle: {\n                  display: true,\n                  text: \"\"\n              },\n              tooltip: {\n                  callbacks: {\n                      label: function(ctx) {\n                let label = ctx.dataset.label || \"\";\n                if (label === 'Battery') {\n                    label += ': ';\n                    label += ctx.parsed.y.toFixed(2)\n                    label += ' ('\n                    label += ((ctx.parsed.y / {{ flow.dess.options.b_max}} ) * 100).toFixed(1)\n                    label += '%)'\n                }\n                else {\n                    label += ': ' + ctx.parsed.y.toFixed(2)\n                }\n                return label;\n                      }\n                  }\n              }\n          }\n        },\n        plugins: [arbitraryLine]\n      }\n    );\n\n  const schedulechart = new Chart(\n    document.getElementById('schedule'),\n    {\n      type: 'bar',\n      data: {\n        labels: [{{schedule.payload.labels}}],\n        datasets: [\n            {{#schedule.payload.datasets}}\n            {\n                label: '{{label}}',\n                data: [{{data}}],\n                borderColor: '{{borderColor}}',\n                backgroundColor: '{{backgroundColor}}',\n                fill: {{fill}},\n            },\n            {{/schedule.payload.datasets}}\n        ]\n      },\n      options: {\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },      \n        scales: {\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: \"Energy in kWh\"\n                }\n            }\n        },\n        plugins: {\n            arbitraryLine: {\n                pastBackgroundColor: '#EEEEEE',\n                nowBackgroundColor: '#DDDDDD',\n                hours: {{ dess_hours }}\n            },\n            title: {\n                display: true,\n                text: \"Schedule graph\"\n            },\n            subtitle: {\n                display: true,\n                text: \"Positive values represent the energy used from the item (opposite for negatives).\"\n            }\n        }\n      },\n      plugins: [arbitraryLine]\n    }\n  );\n\n  const dapchart = new Chart(\n    document.getElementById('dayaheadprices'),\n    {\n      type: 'bar',\n      data: {\n        labels: [{{dayaheadprices.payload.labels}}],\n        datasets: [\n            {{#dayaheadprices.payload.datasets}}\n            {\n                label: '{{label}}',\n                type: '{{type}}',\n                data: [{{data}}],\n                borderColor: '{{borderColor}}',\n                backgroundColor: '{{backgroundColor}}',\n                fill: {{fill}},\n                stepped: '{{stepped}}',\n                pointRadius: {{pointRadius}},\n                borderWidth: {{borderWidth}}\n            },\n            {{/dayaheadprices.payload.datasets}}\n        ]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },\n        scales: {\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: \"Price in €/kWh\"\n                }\n            }\n        },\n        plugins: {\n            arbitraryLine: {\n                pastBackgroundColor: '#EEEEEE',\n                nowBackgroundColor: '#DDDDDD',\n                offset: 1,\n                hours: {{ dess_hours }}\n            },\n            title: {\n                display: true,\n                text: \"Price graph\"\n            },\n            subtitle: {\n                display: true,\n                text: \"Buy & Sell prices take the provider fee, energy tax and VAT into account.\"\n            }\n        }\n      },\n      plugins: [arbitraryLine]\n    }\n  );\n\n  const ucchart = new Chart(\n    document.getElementById('costs'),\n    {\n      type: 'bar',\n      data: {\n        labels: [{{costs.payload.labels}}],\n        datasets: [\n            {{#costs.payload.datasets}}\n            {\n                label: '{{label}}',\n                data: [{{data}}],\n                borderColor: '{{borderColor}}',\n                backgroundColor: '{{backgroundColor}}',\n                fill: {{fill}},\n            },\n            {{/costs.payload.datasets}}\n        ]\n      },\n      options: {\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },      \n        scales: {\n            y: {\n                beginAtZero: true,\n                title: {\n                    display: true,\n                    text: \"Cost in €\"\n                }\n            }\n        },\n        plugins: {\n            arbitraryLine: {\n                pastBackgroundColor: '#EEEEEE',\n                nowBackgroundColor: '#DDDDDD',\n                hours: {{ dess_hours }}\n            },\n            title: {\n                display: true,\n                text: \"Costs graph\"\n            }\n        }\n      },\n      plugins: [arbitraryLine]\n    }\n  );\n\n  const enchart = new Chart(\n    document.getElementById('energy'),\n    {\n      type: 'bar',\n      data: {\n        labels: [{{energy.payload.labels}}],\n        datasets: [\n            {{#energy.payload.datasets}}\n            {\n                label: '{{label}}',\n                type: '{{type}}',\n                data: [{{data}}],\n                borderColor: '{{borderColor}}',\n                backgroundColor: '{{backgroundColor}}',\n                fill: {{fill}},\n                stepped: '{{stepped}}',\n                {{#pointStyle}}\n                pointStyle: {{pointStyle}},\n                {{/pointStyle}}\n                {{#borderWidth}}\n                borderWidth: {{borderWidth}},\n                {{/borderWidth}}\n                {{#stack}}\n                stack: {{stack}},\n                {{/stack}}\n            },\n            {{/energy.payload.datasets}}\n        ]\n      },\n      options: {\n        elements: {\n            point:{\n                radius: 0\n            }\n        },\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: ''\n        },\n        legend: {\n          position: 'top',\n          display: true,\n          labels: {\n              filter: function(item, chart) {\n                return !item.text.includes(\"DISCARD\");\n              }\n          }\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index',\n        },\n        plugins: {\n            arbitraryLine: {\n                pastBackgroundColor: '#EEEEEE',\n                nowBackgroundColor: '#DDDDDD',\n                hours: {{ dess_hours }}\n            },\n            title: {\n                display: true,\n                text: \"Energy Graph\"\n            }\n        }\n    },\n      plugins: [arbitraryLine]\n    }\n  );\n\n</script>\n<hr />\n\n<h3>Dynamic ESS schedules</h3>\n\n<p>\nThe table shows all inserted Dynamic ESS Schedules.\n</p>\n\n<table class=\"dess-table\">\n  <thead>\n    <tr>\n      <th>Schedule</th>\n      <th>Start</th>\n      <th>Targeted Soc</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>#0</td>\n      <td>{{table.0.start}}</td>\n      <td>{{table.0.soc}} %</td>\n    </tr>\n    <tr>\n      <td>#1</td>\n      <td>{{table.1.start}}</td>\n      <td>{{table.1.soc}} %</td>\n    </tr>\n    <tr>\n      <td>#2</td>\n      <td>{{table.2.start}}</td>\n      <td>{{table.2.soc}} %</td>\n    </tr>\n    <tr>\n      <td>#3</td>\n      <td>{{table.3.start}}</td>\n      <td>{{table.3.soc}} %</td>\n    </tr>\n  </tbody>\n</table>\n\n  <hr />\n  Last update: {{ lastValidUpdate }}\n\n  </body>\n</html>",
        "output": "str",
        "x": 860,
        "y": 300,
        "wires": [
            [
                "6527e095b32452ed"
            ]
        ]
    },
    {
        "id": "b70731968b362776",
        "type": "template",
        "z": "9c917bed058521b9",
        "g": "286fe630a9692464",
        "name": "javascript",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "\n     const arbitraryLine = {\n        id: 'arbitraryLine',\n        beforeDraw(chart, args, options){\n            const { \n                ctx, \n                chartArea: { top, right, bottom, left, width, height, margins}, \n                scales: {x, y}\n            } = chart;\n            ctx.save()\n            const d = new Date();\n            let hours = ( options.hours || 24 ) - 1\n            ctx.strokeStyle = options.nowBackgroundColor\n            ctx.fillStyle = options.nowBackgroundColor\n            let widthNow = (width / hours) * (d.getHours()+1)\n            let offset = ( options.offset || 0) * ( width / (hours * 2) ) - (( options.offset || 0 ) * .5 * (width / (hours * 4)))\n            ctx.fillRect(left + offset, top, widthNow, height)\n            ctx.strokeStyle = options.pastBackgroundColor\n            ctx.fillStyle = options.pastBackgroundColor\n            let widthPast = (width / hours) * (d.getHours())\n            ctx.fillRect(left, top, widthPast + offset, height)\n            ctx.restore()\n            \n        }\n    }\n\n",
        "output": "str",
        "x": 540,
        "y": 340,
        "wires": [
            [
                "4fbe41603d39d06d"
            ]
        ]
    },
    {
        "id": "24f9d377dd61c123",
        "type": "ui_group",
        "name": "Visualisations",
        "tab": "cc1a49b54f71c790",
        "order": 1,
        "disp": true,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cc1a49b54f71c790",
        "type": "ui_tab",
        "name": "Dynamic ESS",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "6ee15ebefb669454",
        "type": "group",
        "z": "9c917bed058521b9",
        "name": "Switch based on buy price",
        "style": {
            "label": true
        },
        "nodes": [
            "1a6f45887972bf1f",
            "34aa2943fd429dd3",
            "c1340bf204cf76c1",
            "2a98ef6252c448be",
            "bc6b3c5f990f30b3",
            "4f35ec5cfa9757b8",
            "df498722d9c568ab",
            "a52835bee22b583c",
            "1187484538b55afe",
            "ddecc0160d30fdf9"
        ],
        "x": 34,
        "y": 439,
        "w": 1092,
        "h": 222
    },
    {
        "id": "1a6f45887972bf1f",
        "type": "function",
        "z": "9c917bed058521b9",
        "g": "6ee15ebefb669454",
        "name": "Parse buy price info",
        "func": "// Get the data from the context\nconst dess = flow.get('dess')\nif (! dess) {\n    return\n}\n\nconst values = Object.values(dess.output.p_b);\n\n// Calculate the sum of all values\nconst sum = values.reduce((acc, curr) => acc + curr, 0);\n\n// Calculate the average\nlet average_price = sum / values.length;\n\n// Prevent division by zero\nif (average_price === 0) { average_price = 0.000001; }\n\n// Add a flag to each object indicating above, below, or equal to average\ndess.parsed = { p_b: [] }\nfor (const key in dess.output.p_b) {\n    if (dess.output.p_b.hasOwnProperty(key)) {\n        const value = dess.output.p_b[key];\n        const flag = value > average_price ? \"above\" : value < average_price ? \"below\" : \"equal\";\n        const offset_perc = (value - average_price)/average_price;\n        dess.parsed.p_b[key] = { flag, offset_perc };\n    }\n}\n\nconst d = new Date()\n\ndess.average_price = average_price\ndess.price_compared_to_average = dess.parsed.p_b[d.getHours()].flag\ndess.price_offset_percentage = dess.parsed.p_b[d.getHours()].offset_perc\ndess.negative_price = dess.parsed.p_b[d.getHours()].value <= 0\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 540,
        "wires": [
            [
                "34aa2943fd429dd3",
                "4f35ec5cfa9757b8"
            ]
        ]
    },
    {
        "id": "34aa2943fd429dd3",
        "type": "switch",
        "z": "9c917bed058521b9",
        "g": "6ee15ebefb669454",
        "name": "Compare average to current price",
        "property": "dess.price_compared_to_average",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "above",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "equal",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "below",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 520,
        "y": 500,
        "wires": [
            [
                "2a98ef6252c448be"
            ],
            [
                "2a98ef6252c448be"
            ],
            [
                "bc6b3c5f990f30b3"
            ]
        ]
    },
    {
        "id": "c1340bf204cf76c1",
        "type": "victron-output-relay",
        "z": "9c917bed058521b9",
        "g": "6ee15ebefb669454",
        "service": "com.victronenergy.system/0",
        "path": "/Relay/0/State",
        "serviceObj": {
            "service": "com.victronenergy.system/0",
            "name": "Venus device"
        },
        "pathObj": {
            "path": "/Relay/0/State",
            "type": "enum",
            "name": "Venus relay 1 state",
            "enum": {
                "0": "Open",
                "1": "Closed"
            },
            "writable": true
        },
        "initial": "",
        "name": "Venus Relay 1",
        "onlyChanges": false,
        "x": 1020,
        "y": 500,
        "wires": []
    },
    {
        "id": "2a98ef6252c448be",
        "type": "change",
        "z": "9c917bed058521b9",
        "g": "6ee15ebefb669454",
        "name": "Open relay",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 480,
        "wires": [
            [
                "c1340bf204cf76c1"
            ]
        ]
    },
    {
        "id": "bc6b3c5f990f30b3",
        "type": "change",
        "z": "9c917bed058521b9",
        "g": "6ee15ebefb669454",
        "name": "Close relay",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 520,
        "wires": [
            [
                "c1340bf204cf76c1"
            ]
        ]
    },
    {
        "id": "4f35ec5cfa9757b8",
        "type": "switch",
        "z": "9c917bed058521b9",
        "g": "6ee15ebefb669454",
        "name": "Check for negative price",
        "property": "dess.negative_price",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 600,
        "wires": [
            [
                "df498722d9c568ab"
            ],
            [
                "a52835bee22b583c"
            ]
        ],
        "outputLabels": [
            "negative buy price",
            "positive buy price"
        ]
    },
    {
        "id": "df498722d9c568ab",
        "type": "change",
        "z": "9c917bed058521b9",
        "g": "6ee15ebefb669454",
        "name": "Open relay",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 580,
        "wires": [
            [
                "1187484538b55afe"
            ]
        ]
    },
    {
        "id": "a52835bee22b583c",
        "type": "change",
        "z": "9c917bed058521b9",
        "g": "6ee15ebefb669454",
        "name": "Close relay",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 620,
        "wires": [
            [
                "1187484538b55afe"
            ]
        ]
    },
    {
        "id": "1187484538b55afe",
        "type": "victron-output-relay",
        "z": "9c917bed058521b9",
        "g": "6ee15ebefb669454",
        "service": "com.victronenergy.system/0",
        "path": "/Relay/1/State",
        "serviceObj": {
            "service": "com.victronenergy.system/0",
            "name": "Venus device"
        },
        "pathObj": {
            "path": "/Relay/1/State",
            "type": "enum",
            "name": "Venus relay 2 state",
            "enum": {
                "0": "Open",
                "1": "Closed"
            },
            "writable": true
        },
        "initial": "",
        "name": "Venus Relay 2",
        "onlyChanges": false,
        "x": 1020,
        "y": 600,
        "wires": []
    },
    {
        "id": "ddecc0160d30fdf9",
        "type": "link in",
        "z": "9c917bed058521b9",
        "g": "6ee15ebefb669454",
        "name": "link in 2",
        "links": [
            "0a258a4a88409834",
            "e2151fa44797a843"
        ],
        "x": 75,
        "y": 540,
        "wires": [
            [
                "1a6f45887972bf1f"
            ]
        ]
    },
    {
        "id": "8a81b016cd58adb6",
        "type": "group",
        "z": "9c917bed058521b9",
        "name": "Get DESS mode",
        "style": {
            "label": true
        },
        "nodes": [
            "398088b82c29d3d3",
            "a2442d0a8964405c"
        ],
        "x": 34,
        "y": 159,
        "w": 1092,
        "h": 82
    },
    {
        "id": "398088b82c29d3d3",
        "type": "change",
        "z": "9c917bed058521b9",
        "g": "8a81b016cd58adb6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "dess_mode",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "a2442d0a8964405c",
        "type": "victron-input-custom",
        "z": "9c917bed058521b9",
        "g": "8a81b016cd58adb6",
        "service": "com.victronenergy.settings",
        "path": "/Settings/DynamicEss/Mode",
        "serviceObj": {
            "service": "com.victronenergy.settings",
            "name": "com.victronenergy.settings"
        },
        "pathObj": {
            "path": "/Settings/DynamicEss/Mode",
            "name": "/Settings/DynamicEss/Mode",
            "type": "number"
        },
        "name": "",
        "onlyChanges": true,
        "x": 270,
        "y": 200,
        "wires": [
            [
                "398088b82c29d3d3"
            ]
        ]
    }
]
